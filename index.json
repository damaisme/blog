[{"content":"Limitasi Gitlab Saat menggunakan default template sast yaitu SAST.gitlab-ci.yml template, ditemukanya vulnerability atau tidak status job nya pasti akan passed yang menyebabkan pipeline akan terus berjalan walupun ditemukan bug. Jika menginginkan fitur lebih seperti detect false positives, sort and manage vulnabilitier, dan lain2 kita harus upgrade gitlab ke ultimate.\nDi tulisan kali in kita akan mencoba membuat dan mengkostumisasi job yang akan mengecek content dari report analyzer. How it is achieved:\njob SAST analyzer menghasilkan report/artifacts job selanjutnya akan mengecek report sehingga jika ada bug/vulnerability ditemukan, maka pipeline akan gagal. Custom SAST Pipeline Buat project baru dari template Pilih tempalte nodejs express Create Project\nBuka Web IDE, buat dan edit .gitlab-ci.yml; buat job yang menjalakan nodejs-scan analyzer.\n# tidak perlu include template sast karena job dibuat manual stages: - test nodejs-scan-sast: image: registry.gitlab.com/security-products/sast/nodejs-scan:2 # image nodejs-scan-sast stage: test # job dijalankan di test stage artifacts: paths: - gl-sast-report.json # supaya json report bisa diakses di next job script: - /analyzer run gl-sast-report.json ini adalah nama file report, semua analyzer image sama.\nTambahkan job sast-vuln, job ini yang akan ngecek hasil report dari job nodejs-scan-sast. ... sast-vuln: stage: test needs: - nodejs-scan-sast image: python:3-slim script: - python3 check_vuln.py # Menjalankan script python yang akan menganisis gl-sast-report.json di gitlab ci ada special keyword needs dimana keyword ini akan membuat dependencies diantara job, dan membuat job hanya dapat berjalan jika dependent job complete. pada kasus ini sast-vuln hanya dapat berjalan jika nodejs-scan-sast passed.\nDi atas ada menjalankan script python, bingung? sans\u0026hellip; bakal dibahas di bawah.\nTambahkan stage dan job deploy. Stage dan job ini hanya untuk simulasi, yang hanya akan berjalan jika job di test stage passed. stages: - test - deploy #deploy stage hanya akan berjalan jika test stage passed. ... deploy-job: stage: deploy script: - echo \u0026#34;deploy successfull\u0026#34; Maka full .gitlab-ci.yml jadi seperti di bawah ini # tidak perlu include template sast karena job dibuat manual stages: - test - deploy #deploy stage hanya akan berjalan jika test stage passed. nodejs-scan-sast: image: registry.gitlab.com/security-products/sast/nodejs-scan:2 # image nodejs-scan-sast stage: test # job dijalankan di test stage artifacts: paths: - gl-sast-report.json # supaya json report bisa diakses di next job script: - /analyzer run sast-vuln: stage: test needs: - nodejs-scan-sast image: python:3-slim script: - python3 check_vuln.py # Menjalankan script python yang akan menganisis gl-sast-report.json deploy-job: stage: deploy script: - echo \u0026#34;deploy successfull\u0026#34; Buat file baru check_vuln.py import sys import json with open(\u0026#39;gl-sast-report.json\u0026#39;) as json_file: report = json.load(json_file) if ( len(report[\u0026#39;vulnerabilities\u0026#39;]) != 1 ): print(\u0026#34;No Vulnerabilities Detected\u0026#34;) else: print(\u0026#34;Vulnerabilities detected\u0026#34;) for x in report[\u0026#39;vulnerabilities\u0026#39;]: pretty_json = json.dumps(x, indent=4) print(pretty_json) sys.exit(1) Ini script checker yang akan mengecek json report dan akan memberi return error jka ada vulnerability ditemukan. Hal ini akan membuat pipeline failed, hingga bug difix.\ncheck_vuln.py bekerja seperti berikut:\ndecoding JSON Report file ke Python Dictionary yang berisi data dari analyzer terkait vulnerabilities; printing setiap vulnerability jika ada, menggunakan pretty json formatted. atau bisa juga diberi warna, dijadiin table, dll untuk tujuan visualisasi; return error jika length array vulnerabilities tidak 0. untuk pengecekan report bisa menggunakan pemprograman apapun, disini menggukana python hanya sebagai contoh agar mudah.\nPipeline selesai, sekarang tambahkan bug ke code kita untuk simulasi. Edit file routes/users.js jadi seperti dibawah. var express = require(\u0026#39;express\u0026#39;); var router = express.Router(); /* GET users listing. */ router.get(\u0026#39;/\u0026#39;, function(req, res, next) { res.send(\u0026#39;hello\u0026#39;,req.params.name); }); module.exports = router; Commit semua perubahan ke current branch, ini akan menjalankan pipeline.\nBuka CI/CD Pipeline page dan bisa dilihat job sast-vuln berstatus failed dan deploy stage tidak dijalankan. Karena ada bug ditemukan. Click di sast-vuln job, di log terdapat detail dari vulnerabilities. disini terdapat satu vuln bernama express_xss dengan severity high di file routes/users.js line 6, ini adalah vuln yang kita buat sebelumnya. Sekarang kita coba fix bugnya, buka Web IDE lalu edit routes/users.js, edit line 6 menjadi seperti ini:\nres.send(\u0026#39;hello\u0026#39;); Save lalu commit ke current branch\nBuka CI/CD Pipeline page. Sekarang job sast-vuln passed dan deploy stage dijalankan. Pipeline sekarang dapat memberikan feedback error jika ada bug ditemukan.\nKesimpulan: SAST adalah tools yang lumayan berguna saat menerapkan ci/cd di gitlab dan disarankan untuk dijalankan di test stage untuk mendeteksi bug dari source code. Berapa fitur SAST Gitlab harus upgrade tier ke ultimate dulu untuk bisa digunakan. Tetapi terdapat berbagai cara untuk mencapai tujuan yang sama.\n","permalink":"blog.dendi.ninja/post/custom-sast-pipeline/","summary":"Limitasi Gitlab Saat menggunakan default template sast yaitu SAST.gitlab-ci.yml template, ditemukanya vulnerability atau tidak status job nya pasti akan passed yang menyebabkan pipeline akan terus berjalan walupun ditemukan bug. Jika menginginkan fitur lebih seperti detect false positives, sort and manage vulnabilitier, dan lain2 kita harus upgrade gitlab ke ultimate.\nDi tulisan kali in kita akan mencoba membuat dan mengkostumisasi job yang akan mengecek content dari report analyzer. How it is achieved:","title":"Custom SAST Pipeline"}]